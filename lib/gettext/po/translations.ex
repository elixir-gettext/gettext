defmodule Gettext.PO.Translations do
  @moduledoc false

  alias Expo.Message

  defmacrop is_message(module) do
    quote do
      unquote(module) in [Message.Singular, Message.Plural]
    end
  end

  @doc """
  Tells whether a message was manually entered or generated by Gettext.

  As of now, a message is considered autogenerated if it has the "elixir-autogen" flag.

  ## Examples

      iex> message = %Expo.Message.Singular{msgid: ["foo"], flags: [["elixir-autogen"]]}
      iex> Gettext.PO.Translations.autogenerated?(message)
      true

      iex> message = %Expo.Message.Singular{msgid: ["foo"]}
      iex> Gettext.PO.Translations.autogenerated?(message)
      false

  """
  @spec autogenerated?(message :: Message.t()) :: boolean
  def autogenerated?(message) do
    Message.has_flag?(message, "elixir-autogen")
  end

  @doc """
  Tells whether a message is protected from purging.

  A message that is protected from purging will never be removed by Gettext.
  Which messages are proteced can be configured using Mix.

  ## Example

      iex> protected_pattern = ~r{^web/static/}
      iex> message = %Expo.Message.Singular{msgid: ["Hello world!"], references: [{"web/static/js/app.js", 42}]}
      iex> Gettext.PO.Translations.protected?(message, protected_pattern)
      true

  """
  @spec protected?(message :: Message.t(), protected_pattern :: Regex.t()) :: boolean
  def protected?(message, protected_pattern)

  def protected?(_t, nil), do: false

  def protected?(%module{references: []}, _pattern) when is_message(module), do: false

  def protected?(%module{references: refs}, pattern) when is_message(module),
    do: Enum.any?(refs, fn {path, _} -> Regex.match?(pattern, path) end)
end
